Bootstrap: docker
From:	centos:6

%environment
	export PYTHONUSERBASE=/usr/local/admin/git-repo
	export PATH=$PATH:/usr/pgsql-9.6/bin
	export HTSLIB_LIBRARY_DIR=/usr/local/lib
	export HTSLIB_INCLUDE_DIR=/usr/local/include
	export PYTHON_EGG_CACHE=/tmp/Python-Eggs
	export PIP_DOWNLOAD_CACHE=/tmp/Python-pip-downloads
	export LD_LIBRARY_PATH=/usr/local/lib

%post
	export PYTHONUSERBASE=/usr/local/admin/git-repo
	export PATH=$PATH:/usr/pgsql-9.6/bin
	export HTSLIB_LIBRARY_DIR=/usr/local/lib
	export HTSLIB_INCLUDE_DIR=/usr/local/include
	export PYTHON_EGG_CACHE=/tmp/Python-Eggs
	export PIP_DOWNLOAD_CACHE=/tmp/Python-pip-downloads
	export LD_LIBRARY_PATH=/usr/local/lib

	#
	# Need EL for correct postgres, EPEL for mod_xsendfile, IUS for other odds and ends.
	#
	yum localinstall -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-6-x86_64/pgdg-redhat-repo-latest.noarch.rpm
	yum localinstall -y https://download.fedoraproject.org/pub/epel/6/x86_64/Packages/e/epel-release-6-8.noarch.rpm
#	yum install -y https://$(rpm -E '%{?centos:centos}%{!?centos:rhel}%{rhel}').iuscommunity.org/ius-release.rpm
	yum install -y https://repo.ius.io/ius-release-el6.rpm 
	yum update -y
	yum install -y git httpd24u httpd24u-devel postgresql96 postgresql96-devel \
                   which httpd24u-mod_xsendfile openssl-devel openldap-devel \
                   libxml2 libxml2-devel libxslt-devel libxslt gcc bzip2-devel \
                   make wget xz-devel python27 python27-devel \
                   python27-setuptools python27-pip python-requests \
                   python-markdown libcurl-devel gnuplot ncurses-devel \
                   zlib-devel yum-utils unzip liberation-sans-fonts \
                   cabextract xorg-x11-font-utils xorg-x11-server-utils \
                   ttmkfdir lynx
	pip2.7 install --upgrade pip setuptools
	pip2.7 install "django==1.8.7"

	#
	# Note that python27-mod_wsgi is incompatible with httpd24u, so cannot be installed via yum.
	# Instead we just install with pip.
	#
	pip2.7 install mod_wsgi numpy
	mod_wsgi-express module-config > /etc/httpd/conf.modules.d/01-wsgi.conf

	#
	# Package gnuplot-py-1.8 is no longer available via pypi, hence we retrieve from sourceforge.
	#
	wget -O gnuplot-py.zip https://sourceforge.net/projects/gnuplot-py/files/latest/download
	unzip gnuplot-py.zip
	(cd gnuplot-py-1.8; python2.7 setup.py install)

	#
	# htslib is not available as a yum package in Centos 6, so we must install separately.
	#
	# Note that wget of htslib from GitHub is currently failing most of the time, so
	# there must be a copy in the directory where the build takes place.  (See the "%files" 
	# section below.)  If/when 
	# the downloads work reliably, you can remove that requirement, and replace
	# the tar command following with the wget and tar commands here:
#	wget https://github.com/samtools/htslib/releases/download/1.9/htslib-1.9.tar.bz2
#	tar xf htslib-1.9.tar.bz2
	tar xf /tmp/htslib-1.9.tar.bz2
	# At this point, it doesn't matter where it came from; we just have to build and install:
	(cd htslib-1.9; ./configure; make; make install)

	#
	# Install pysam; this must be done after htslib is available.
	#
	pip2.7 install pysam

	#
	# Install custom httpd.conf for WSGI setup.
	#
	mv /etc/httpd/conf/httpd.conf /etc/httpd/conf/httpd.conf.orig
	mv /tmp/httpd.conf /etc/httpd/conf

	#
	# Now get the actual osqpipe stuff, and install it.
	#
	mkdir -p /usr/local/admin/git-repo/trunk
	(cd /usr/local/admin/git-repo/trunk ; git clone https://github.com/odomlab/odom_data_processing.git pipeline )
	mv /tmp/setup.py /usr/local/admin/git-repo/trunk/pipeline/package
	(cd /usr/local/admin/git-repo/trunk/pipeline/util-package; python2.7 setup.py install)
	(cd /usr/local/admin/git-repo/trunk/pipeline/package; python2.7 setup.py install)
	mv /tmp/settings.py /usr/local/admin/git-repo/trunk/pipeline/django/cs_pipeline/settings.py

	#
	# Set up links for CSS.
	#
	ln -s /usr/local/admin/git-repo/trunk/pipeline/package/osqpipe/static /var/www/html/django
	ln -s /usr/lib/python2.7/site-packages/django/contrib/admin/static/admin /var/www/html/django/admin

	#
	# Enable XSendFile.
	#
	echo 'XSendFile on' >> /etc/httpd/conf.modules.d/10-xsendfile.conf

	#
	# Create links for the data repository, so no matter which archive the file is in now,
	# at CRUK, the links will work at EBI, where everything is in one huge archive.
	#
	mkdir -p /data02/repository
	mkdir -p /mnt/archive3/Groups/DOLab/fs04
	mkdir -p /mnt/archive3/Groups/DOLab/fs05
	mkdir /data03
	mkdir /data04
	mkdir -p /nfs/leia/research/flicek/user/fnc-odompipe/

	ln -s /data02/repository /mnt/archive3/Groups/DOLab/fs04/repository
	ln -s /data02/repository /mnt/archive3/Groups/DOLab/fs05/repository
	ln -s /data02/repository /data03/repository
	ln -s /data02/repository /data04/repository
	ln -s /data02/repository /nfs/leia/research/flicek/user/fnc-odompipe/respository

	#
	# Set up a couple of convenience commands to run and stop the Apache server.
	# These are mostly useful when using 'singularity shell' to work in the container
	# interactively. 'wstart' and 'wstop' start and stop the server.
	#
	echo $'#!/bin/bash\n/usr/sbin/httpd -f /etc/httpd/conf/httpd.conf -D DEFAULT_VHOST -D INFO -D LANGUAGE -D XSENDFILE -D STATUS -D WSGI -D SSL -D SSL_DEFAULT_VHOST -k start' > /usr/bin/wstart
	echo $'#!/bin/bash\n/usr/sbin/httpd -f /etc/httpd/conf/httpd.conf -k stop' > /usr/bin/wstop
	chmod +x /usr/bin/wstart /usr/bin/wstop

%files
	httpd.conf /tmp
	setup.py /tmp
	settings.py /tmp
	htslib-1.9.tar.bz2 /tmp

%runscript
	/usr/sbin/httpd -f /etc/httpd/conf/httpd.conf -D DEFAULT_VHOST -D INFO -D LANGUAGE -D XSENDFILE -D STATUS -D WSGI -D SSL -D SSL_DEFAULT_VHOST -k start
	#
	# Use the following command to stop the server.
	#
	#/usr/sbin/httpd -f /etc/httpd/conf/httpd.conf -k stop

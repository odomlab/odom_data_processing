#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\begin_modules
knitr
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 1.5cm
\rightmargin 2cm
\bottommargin 1.5cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<setup, include=FALSE, cache=FALSE>>=
\end_layout

\begin_layout Plain Layout

## Quietly load knitr for report generation.
\end_layout

\begin_layout Plain Layout

library(knitr)
\end_layout

\begin_layout Plain Layout

library(methods)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

## Set global chunk options.
 To remove all code chunks except
\end_layout

\begin_layout Plain Layout

## those required to interpret the output, set include and echo to FALSE.
\end_layout

\begin_layout Plain Layout

opts_chunk$set(fig.path='figure/qcreport-',
\end_layout

\begin_layout Plain Layout

               cache.path='cache/qcreport-',
\end_layout

\begin_layout Plain Layout

               fig.align='center',
\end_layout

\begin_layout Plain Layout

               fig.show='asis',
\end_layout

\begin_layout Plain Layout

               include=TRUE,
\end_layout

\begin_layout Plain Layout

               echo=TRUE,
\end_layout

\begin_layout Plain Layout

               cache=FALSE,
\end_layout

\begin_layout Plain Layout

               par=TRUE)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

## Seamlessly s/=/<-/g in assignments; set code/output width to be 68
\end_layout

\begin_layout Plain Layout

options(formatR.arrow=TRUE, width=68, digits=4)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

## Tune details of base graphics (http://yihui.name/knitr/hooks)
\end_layout

\begin_layout Plain Layout

knit_hooks$set(par=function(before, options, envir){
\end_layout

\begin_layout Plain Layout

  if (before && options$fig.show!='none')
\end_layout

\begin_layout Plain Layout

    par(mar=c(4,4,.1,.1),cex.lab=.95,cex.axis=.9,mgp=c(2,.7,0),tcl=-.3)
\end_layout

\begin_layout Plain Layout

})
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Title
Whole Genome Sequencing QC Report
\end_layout

\begin_layout Author
Odom Lab
\end_layout

\begin_layout Date
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
today
\end_layout

\end_inset

ﬁ
\end_layout

\begin_layout Section
Report Configuration
\end_layout

\begin_layout Standard
This section defines the quality acceptance thresholds used in the rest
 of the report.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<configuration, include=TRUE, echo=TRUE, cache=TRUE>>=
\end_layout

\begin_layout Plain Layout

## The input file must be in the same directory as the Lyx or Rnw file
\end_layout

\begin_layout Plain Layout

## for FastQC data import to work properly.
\end_layout

\begin_layout Plain Layout

inputfile <- 'SampleSheet.csv'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

## The median quality score above which a read is counted as acceptable.
\end_layout

\begin_layout Plain Layout

qc_cutoff <- 30
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

## The fraction of reads which must have the above acceptable quality score.
\end_layout

\begin_layout Plain Layout

okfrac_thresh <- 0.75
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

## The fraction of reads which must be unique (i.e., not counted as duplicates).
\end_layout

\begin_layout Plain Layout

uniqfrac_thresh <- 0.9
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

## The lowest median 3' quality score which is deemed acceptable.
\end_layout

\begin_layout Plain Layout

lowesttailmed_cutoff <- 24
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

## Other cutoffs for externally computed parameters which may be included
 in the inputfile.
\end_layout

\begin_layout Plain Layout

other_cutoffs <- list()
\end_layout

\begin_layout Plain Layout

other_cutoffs[['Fraction Aligned to Target Genome']] <- 0.8
\end_layout

\begin_layout Plain Layout

other_cutoffs[['Fraction of Genome with >=0.75 Median Coverage']] <- 0.8
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<library-load, include=TRUE, cache=FALSE, message=FALSE,size='scriptsize'>>=
\end_layout

\begin_layout Plain Layout

## Import of FastQC Report data starts here.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

## Load required libraries.
\end_layout

\begin_layout Plain Layout

library(FastQCReport)
\end_layout

\begin_layout Plain Layout

library(ggplot2)
\end_layout

\begin_layout Plain Layout

library(reshape2)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<data-import, include=TRUE, cache=TRUE, message=FALSE, dependson='configuration
',size='scriptsize'>>=
\end_layout

\begin_layout Plain Layout

## Read in our sample sheet and run a quick check for required column names.
\end_layout

\begin_layout Plain Layout

samples <- read.csv(inputfile, check.names=FALSE)
\end_layout

\begin_layout Plain Layout

lccols <- tolower(colnames(samples))
\end_layout

\begin_layout Plain Layout

required <- c('fastqc','plate','row','column')
\end_layout

\begin_layout Plain Layout

stopifnot( all(required %in% lccols ) )
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

## Standardise the required column names as lowercase.
\end_layout

\begin_layout Plain Layout

colnames(samples)[ sapply(required, function(x) which(lccols == x)) ] <-
 required
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

## Numeric column names need to be coded as a factor for grid plots.
\end_layout

\begin_layout Plain Layout

samples[, 'column'] <- factor(samples[, 'column'], levels=1:12)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

## Identify covariate columns.
\end_layout

\begin_layout Plain Layout

covars <- setdiff(colnames(samples), required)
\end_layout

\begin_layout Plain Layout

covar.types     <- sapply(samples[, covars], class)
\end_layout

\begin_layout Plain Layout

covar.numeric   <- covars[covar.types %in% c('numeric', 'integer')]
\end_layout

\begin_layout Plain Layout

covar.categoric <- covars[covar.types %in% c('factor', 'character')]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

## Read in the FastQC text outputs.
\end_layout

\begin_layout Plain Layout

message("Reading FastQC reports...")
\end_layout

\begin_layout Plain Layout

fastqcs <- lapply(as.character(samples$fastqc), parseFastQC)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<data-prep, include=TRUE, cache=FALSE,size='scriptsize'>>=
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

## Calculate summary QC statistics from the FastQC data.
\end_layout

\begin_layout Plain Layout

okfrac        <- sapply(fastqcs, getReadFracAboveQuality, qc_cutoff=qc_cutoff)
\end_layout

\begin_layout Plain Layout

uniqfrac      <- sapply(fastqcs, getUniqReadFrac)
\end_layout

\begin_layout Plain Layout

lowesttailmed <- sapply(fastqcs, getLowestMedian3primeQuality)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

## All categorical variables are combined into a single groups variable.
\end_layout

\begin_layout Plain Layout

## This will be used to stratify the plots below to illustrate possible
\end_layout

\begin_layout Plain Layout

## group-specific QC issues.
\end_layout

\begin_layout Plain Layout

groups <- apply(samples[, covar.categoric], 1, paste, collapse='_')
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Section
QC Parameter Distributions
\end_layout

\begin_layout Standard
The figures below illustrate the distribution of various QC metrics within
 the input WGS data.
 Firstly, a minimum fraction of reads (
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Sexpr{okfrac_thresh}
\end_layout

\end_inset

) is required to meet or exceed a median quality score of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Sexpr{qc_cutoff}
\end_layout

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<okfrac-plot,fig.height=5,out.width='.55
\backslash

\backslash
textwidth',include=TRUE,size='scriptsize'>>=
\end_layout

\begin_layout Plain Layout

p <- ggplot(data.frame(groups=groups, value=okfrac), aes(x=value, colour=groups))
\end_layout

\begin_layout Plain Layout

p <- p + geom_density()
\end_layout

\begin_layout Plain Layout

p <- p + ggtitle(sprintf('Fraction of Reads with Median QC >= %d', qc_cutoff))
\end_layout

\begin_layout Plain Layout

p <- p + xlim(min(okfrac_thresh, min(okfrac)), 1)
\end_layout

\begin_layout Plain Layout

p <- p + geom_vline(xintercept=okfrac_thresh, colour='red', linetype='longdash')
\end_layout

\begin_layout Plain Layout

show(p)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Secondly, the fraction of unique reads (i.e., reads not marked as duplicates)
 must meet or exceed 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Sexpr{uniqfrac_thresh}
\end_layout

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<uniqfrac-plot,fig.height=5,out.width='.55
\backslash

\backslash
textwidth',include=TRUE,size='scriptsize'>>=
\end_layout

\begin_layout Plain Layout

p <- ggplot(data.frame(groups=groups, value=uniqfrac), aes(x=value, colour=groups
))
\end_layout

\begin_layout Plain Layout

p <- p + geom_density() + ggtitle('Fraction of Unduplicated Reads')
\end_layout

\begin_layout Plain Layout

p <- p + xlim(min(uniqfrac_thresh, min(uniqfrac)), 1)
\end_layout

\begin_layout Plain Layout

p <- p + geom_vline(xintercept=uniqfrac_thresh, colour='red', linetype='longdash
')
\end_layout

\begin_layout Plain Layout

show(p)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Thirdly, the lowest recorded median quality score for the 3' base must meet
 or exceed 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Sexpr{lowesttailmed_cutoff}
\end_layout

\end_inset

: 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<lowesttailmed-plot,fig.height=5,out.width='.55
\backslash

\backslash
textwidth',include=TRUE,size='scriptsize'>>=
\end_layout

\begin_layout Plain Layout

p <- ggplot(data.frame(groups=groups, value=lowesttailmed), aes(x=value,
 fill=groups))
\end_layout

\begin_layout Plain Layout

p <- p + geom_histogram(binwidth=1)
\end_layout

\begin_layout Plain Layout

p <- p + xlim(min(lowesttailmed_cutoff, min(lowesttailmed)), max(lowesttailmed))
\end_layout

\begin_layout Plain Layout

p <- p + geom_vline(xintercept=lowesttailmed_cutoff, colour='red', linetype='lon
gdash')
\end_layout

\begin_layout Plain Layout

p <- p + ggtitle('Lowest 3-prime Median Base QC Score')
\end_layout

\begin_layout Plain Layout

p <- p + facet_wrap(~groups)
\end_layout

\begin_layout Plain Layout

show(p)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Finally, any further QC parameters which are provided in the input sample
 sheet are plotted below:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<otherqc-plot,fig.height=5,out.width='.55
\backslash

\backslash
textwidth',include=TRUE,size='scriptsize'>>=
\end_layout

\begin_layout Plain Layout

for (vname in covar.numeric) {
\end_layout

\begin_layout Plain Layout

  p <- ggplot(data.frame(groups=groups, value=samples[, vname]), aes(x=value,
 color=groups))
\end_layout

\begin_layout Plain Layout

  p <- p + geom_density() + ggtitle(vname)
\end_layout

\begin_layout Plain Layout

  if ( tolower(vname) %in% tolower(names(other_cutoffs)) ) {
\end_layout

\begin_layout Plain Layout

    co <- other_cutoffs[[ which(tolower(names(other_cutoffs)) == tolower(vname))
 ]]
\end_layout

\begin_layout Plain Layout

    p <- p + geom_vline(xintercept=co, colour='red', linetype='longdash')
\end_layout

\begin_layout Plain Layout

    p <- p + xlim(min(co, min(samples[, vname])), max(samples[, vname]))
\end_layout

\begin_layout Plain Layout

  } else {
\end_layout

\begin_layout Plain Layout

    warning("No acceptance threshold found for QC parameter '", vname, "'.")
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  show(p)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Section
QC parameters plotted by plate well location
\end_layout

\begin_layout Standard
Below are the QC parameters plotted by their spatial location on each plate.
 This can help to diagnose issues in cases where there is an obvious spatial
 pattern to poor quality sequencing data.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:sample-layout"

\end_inset

 illustrates the layout of the various sample groups for reference.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<groups-grid,out.width='.5
\backslash

\backslash
textwidth',out.height='3.5in',include=TRUE,size='scriptsize'>>=
\end_layout

\begin_layout Plain Layout

p <- ggplot(samples, aes(x=row, y=column, fill=groups))
\end_layout

\begin_layout Plain Layout

p + geom_tile() + coord_equal() + facet_wrap(~plate) + theme_bw()
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:sample-layout"

\end_inset

Layout of sample groups.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<okfrac-grid,out.width='.5
\backslash

\backslash
textwidth',out.height='3.5in',include=TRUE,size='scriptsize'>>=
\end_layout

\begin_layout Plain Layout

bad <- ifelse(okfrac < okfrac_thresh, TRUE, NA)
\end_layout

\begin_layout Plain Layout

cumbad <- !is.na(bad)
\end_layout

\begin_layout Plain Layout

p <- ggplot(samples, aes(x=row, y=column, fill=okfrac, colour=bad))
\end_layout

\begin_layout Plain Layout

p <- p + geom_tile(aes(width=0.9, height=0.9), size=1)
\end_layout

\begin_layout Plain Layout

p <- p + coord_equal() + facet_wrap(~plate) + theme_bw()
\end_layout

\begin_layout Plain Layout

p + scale_colour_manual(values=c('red'))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Fraction of reads with acceptable median quality score (i.e.
 ≥ 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Sexpr{qc_cutoff}
\end_layout

\end_inset

).
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<uniqfrac-grid,out.width='.5
\backslash

\backslash
textwidth',out.height='3.5in',include=TRUE,size='scriptsize'>>=
\end_layout

\begin_layout Plain Layout

bad <- ifelse(uniqfrac < uniqfrac_thresh, TRUE, NA)
\end_layout

\begin_layout Plain Layout

cumbad <- cumbad | !is.na(bad)
\end_layout

\begin_layout Plain Layout

p <- ggplot(samples, aes(x=row, y=column, fill=uniqfrac, colour=bad))
\end_layout

\begin_layout Plain Layout

p <- p + geom_tile(aes(width=0.9, height=0.9), size=1)
\end_layout

\begin_layout Plain Layout

p <- p + theme_bw() + coord_equal() + facet_wrap(~plate)
\end_layout

\begin_layout Plain Layout

p + scale_colour_manual(values=c('red'))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Fraction of non-duplicated reads.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<lowesttailmed-grid,out.width='.5
\backslash

\backslash
textwidth',out.height='3.5in',include=TRUE,size='scriptsize'>>=
\end_layout

\begin_layout Plain Layout

bad <- ifelse(lowesttailmed < lowesttailmed_cutoff, TRUE, NA)
\end_layout

\begin_layout Plain Layout

cumbad <- cumbad | !is.na(bad)
\end_layout

\begin_layout Plain Layout

p <- ggplot(samples, aes(x=row, y=column, fill=lowesttailmed, colour=bad))
\end_layout

\begin_layout Plain Layout

p <- p + geom_tile(aes(width=0.9, height=0.9), size=1)
\end_layout

\begin_layout Plain Layout

p <- p + coord_equal() + facet_wrap(~plate) + theme_bw()
\end_layout

\begin_layout Plain Layout

p + scale_colour_manual(values=c('red'))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Lowest median 3' quality score.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<otherqc-grid,out.width='.5
\backslash

\backslash
textwidth',out.height='3.5in',include=TRUE,size='scriptsize'>>=
\end_layout

\begin_layout Plain Layout

for (vname in covar.numeric) {
\end_layout

\begin_layout Plain Layout

  if ( tolower(vname) %in% tolower(names(other_cutoffs)) ) {
\end_layout

\begin_layout Plain Layout

    co <- other_cutoffs[[ which(tolower(names(other_cutoffs)) == tolower(vname))
 ]]
\end_layout

\begin_layout Plain Layout

  } else {
\end_layout

\begin_layout Plain Layout

    co <- NA; warning("No acceptance threshold found for QC parameter '",
 vname, "'.")
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  bad <- ifelse(samples[, vname] < co, TRUE, NA)
\end_layout

\begin_layout Plain Layout

  cumbad <- cumbad | !is.na(bad)
\end_layout

\begin_layout Plain Layout

  vals <- samples[, vname]
\end_layout

\begin_layout Plain Layout

  p <- ggplot(samples, aes(x=row, y=column, fill=vals, colour=bad))
\end_layout

\begin_layout Plain Layout

  p <- p + geom_tile(aes(width=0.9, height=0.9), size=1)
\end_layout

\begin_layout Plain Layout

  p <- + theme_bw() + coord_equal() + facet_wrap(~plate)
\end_layout

\begin_layout Plain Layout

  p <- p + scale_colour_manual(values=c('red')) + ggtitle(vname)
\end_layout

\begin_layout Plain Layout

  show(p)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Other QC parameters.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Recommendation
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<verdict, cache=FALSE, include=TRUE, message=TRUE, echo=FALSE, size='large',
 comment='', background='#FFFFFF'>>=
\end_layout

\begin_layout Plain Layout

if ( any(cumbad) ) {
\end_layout

\begin_layout Plain Layout

  message("We found ", sum(cumbad), " bad samples.
 Some data were therefore unacceptable.")
\end_layout

\begin_layout Plain Layout

} else {
\end_layout

\begin_layout Plain Layout

  message("No failing samples found.
 Data are fully acceptable.")
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Section
R and Package Versions
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<session-info, include=TRUE, echo=TRUE,size='scriptsize'>>=
\end_layout

\begin_layout Plain Layout

sessionInfo()
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_body
\end_document
